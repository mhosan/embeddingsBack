

@app.get('/contact', tags=['Contactos -test-'])
def getAllContact():
    """
    Get sin parametros pero a la ruta /contact.
    Devuelve todos los contactos.
    """
    try:
        response = supabase.table('contacts').select('*').execute()
        return JSONResponse(content=response.data, status_code=200)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener contactos: {str(e)}")


@app.get('/contact/{id}', tags=['Contactos -test-'])
def getContact(id: int = Path(ge=1, le=1000)):
    """
    Get con parametro de path.
    Devuelve un contacto por su ID.
    Se valida que el ID esté entre 1 y 1000 con Path
    """
    try:
        response = supabase.table('contacts').select('*').eq('id', id).execute()
        if response.data:
            return JSONResponse(content=response.data[0], status_code=200)
        else:
            return JSONResponse(content={"message": "Contacto no encontrado"}, status_code=404)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener contacto: {str(e)}")


@app.get('/contact/', tags=['Contactos -test-'])
def getContactByName(name: str=Query(min_length=3, max_length=50)):
    """
    Get con parametro de query.
    La barra del final es para indicar que se va a recibir un parametro de tipo query.
    Se valida que el nombre tenga entre 3 y 50 caracteres con Query
    Devuelve un contacto por su nombre.
    """
    try:
        response = supabase.table('contacts').select('*').eq('nombre', name).execute()
        if response.data:
            return JSONResponse(content=response.data[0], status_code=200)
        else:
            return JSONResponse(content=[], status_code=404)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener contacto: {str(e)}")


@app.post('/contact', tags=['Contactos -test-'])
def addContact(contact: Contact):
    """
    Post con parametro de body (payload).
    Añade un contacto a la base de datos.
    """
    try:
        response = supabase.table('contacts').insert(contact.dict()).execute()
        return JSONResponse(content={"message": "Contacto añadido correctamente", "contact": response.data[0]}, status_code=201)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al guardar contacto: {str(e)}")


@app.put('/contact/{id}', tags=['Contactos -test-'])
def updateContact(id: int, contact: Contact):
    """
    Put con parametro de path y body (payload).
    Actualiza un contacto por su ID.
    """
    try:
        update_data = {k: v for k, v in contact.dict().items() if k != 'id'}
        response = supabase.table('contacts').update(update_data).eq('id', id).execute()
        if response.data:
            return JSONResponse(content={"message": "Contacto actualizado correctamente", "contact": response.data[0]}, status_code=200)
        else:
            return JSONResponse(content={"message": "Contacto no encontrado"}, status_code=404)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al actualizar contacto: {str(e)}")


@app.delete('/contact/{id}', tags=['Contactos -test-'])
def deleteContact(id: int):
    """
    Delete con parametro de path.
    Elimina un contacto por su ID.
    """
    try:
        response = supabase.table('contacts').delete().eq('id', id).execute()
        if response.data:
            return JSONResponse(content={"message": "Contacto eliminado correctamente", "contact": response.data[0]}, status_code=200)
        else:
            return JSONResponse(content={"message": "Contacto no encontrado"}, status_code=404)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al eliminar contacto: {str(e)}")
